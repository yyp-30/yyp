# -*- coding: utf-8 -*-

"""

@File    :   Calculation.py

生成运算式的类

"""

import random

#  一个数据结构

class stru():


 def __init__(self):
    self.num_count = 0  # 数的个数

    self.num_result_count = 0

    self.num_arr = []  # 数的数组

    self.bra_arr = []  # 括号的数组

    self.brackets = 0  # 括号的数目

    self.sym = []  # 符号的数组

    self.sym_arr = []  # 符号的存储

    self.sym_count = 0  # 符号的数目

    self.result = 0


class ger():


 def gen_que(self, count, max_num, dec, sym, bra, fileout, num_cal_count):
    '''

    :param count:要出的题目数

    :param max_num:最大数

    :param dec:是否有小数

    :param sym:运算符号

    :param bra:是否有括号

    :param fileout:输出方式

    :param num_cal_count:最多几个数运算

    :return:

    '''

    result = ""

    mystru = stru()  # 实例化一个stru类

    for i in range(count):

        mystru.__init__()

        mystru.num_count = random.randint(2, num_cal_count)

        mystru.num_result_count = mystru.num_count

        mystru.sym = sym

        mystru.sym_count = mystru.num_count - 1

        if dec:  # 有小数的情况下

            for i in range(mystru.num_count):

                if random.randint(0, 1):

                    mystru.num_arr.append(round(random.uniform(1, max_num), 1))  # 取一位精度

                else:

                    mystru.num_arr.append(random.randint(1, max_num))

        else:  # 整数情况

            for i in range(mystru.num_count):
                mystru.num_arr.append(random.randint(1, max_num))

        for i in range(mystru.sym_count):  # 生成运算符号

            mystru.sym_arr.append(random.choice(sym))

        if bra:  # 生成括号

            self.genet_bra(mystru)

        result = result + self.print_que(mystru) + "\n"

        # print(self.print_que(mystru) + str(mystru.bra_arr) + "\n")

    return result


def print_que(self, stru):
    """

    根据stru生成一个算式，stru中有必要的原料

    :param stru:输入一个算式结构

    :return:str

    """

    que = ""

    for i in range(stru.num_count + 1):

        if i == 0 and (self.judege_bra(stru, 1, 0)):

            que = que + "(" * self.judege_bra(stru, 1, 0) + str(stru.num_arr[0])

        elif i == 0 and (not self.judege_bra(stru, 1, 0)):

            que = que + str(stru.num_arr[0])

        elif i == stru.num_count and (self.judege_bra(stru, stru.num_count, 1)):

            que = que + ")" * self.judege_bra(stru, stru.num_count, 1) + "="

        elif i == stru.num_count and (not self.judege_bra(stru, stru.num_count, 1)):

            que = que + "="

        else:

            if self.judege_bra(stru, i, 1):
                que = que + ")" * self.judege_bra(stru, i, 1)

            que = que + stru.sym_arr[i - 1]

            if self.judege_bra(stru, i + 1, 0):
                que = que + "(" * self.judege_bra(stru, i + 1, 0)

            que = que + str(stru.num_arr[i])

    return que


def judege_bra(self, stru, posi, left_right):
    """

    判断括号是否存在

    :param stru:

    :param posi:

    :param left_right:位于一个数的左边0，还是右边1

    :return:int 代表出现了几次

    """

    count = 0

    for i in range(stru.brackets):

        if stru.bra_arr[i][left_right] == posi:
            count = count + 1

    return count


def genet_bra(self, stru):
    """

    生成括号数组

    :param stru:输入一个stru结构

    :return:

    """

    brackets = stru.num_count - 2

    stru.brackets = random.randint(0, brackets)  # 括号数目

    while True:

        stru.bra_arr = []

        for i in range(stru.brackets):

            while True:

                temp_list = random.sample([j for j in range(1, stru.num_count + 1)], 2)  # 随机选两个数作为括号

                temp_list.sort()  # 对列表排序

                if (temp_list[0] == 1) and (temp_list[1] == stru.num_count):  # 括号无意义

                    continue

                elif self.list_repeat(stru.bra_arr, temp_list):  # 括号查重

                    continue

                else:

                    stru.bra_arr.append(temp_list)

                    break

        if self.jude_bra_valid(stru):
            break


def list_repeat(self, list1, list2):
    """

    括号去重

    :param list1:stru中的括号数组

    :param list2:

    :return:

    """

    for i in range(len(list1)):

        if (list1[i][0] == list2[0]) and (list1[i][1] == list2[1]):
            return True

        if (list1[i][1] == list2[0]) or (list1[i][0] == list2[1]):
            return True

    return False


def jude_bra_valid(self, stru):
    """

    判定括号是否合法

    :param stru:

    :return:bool

    """

    if stru.brackets == 1:

        return True

    else:

        stru.bra_arr.sort(key=self.get_list_subtract)  # 对数组排序

        stru.bra_arr.sort(key=self.get_list_fir)  # 再次排序

        for i in range(stru.brackets - 1):

            for j in range(i + 1, stru.brackets):

                if (stru.bra_arr[i][1] > stru.bra_arr[j][0]) and (

                        stru.bra_arr[i][0] < stru.bra_arr[j][0]) and (

                        stru.bra_arr[i][1] < stru.bra_arr[j][1]):
                    return False

        return True


def get_list_subtract(self, lst):
    """

    返回数组中第二个和第一个的差

    :param lst:

    :return:

    """

    return lst[1] - lst[0]


def get_list_fir(self, lst):
    """

    返回数组中的第一个值

    :param lst:

    :return:

    """

    return lst[0]
